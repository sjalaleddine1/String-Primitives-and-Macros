Microsoft (R) Macro Assembler Version 14.29.30146.0	    12/04/22 23:12:37
<Project 6 - String Primitives and Macros   (Proj6_jalaleds.  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros   (Proj6_jalaleds.asm)

				; Author: Salim Jalaleddine
				; Last Modified: 11/30/2022
				; OSU email address: jalaleds@oregonstate.edu
				; Course number/section:   CS271 Section 402
				; Project Number: 6                Due Date: 12/4/22
				; Description: Program asks user to enter 10 integers that are taken in
				; string form. Each integer is validated to see if they fit in 32-bit registers, or
				; if negative. Integers are converted to decimal and truncated average, sum, and
				; list of numbers are displayed

				;  Implementation notes:
				;	This program is implemented using procedures.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; -- mGetString --
				; Gets string input from user, is a macro
				; preconditions: buffer, prompt, len_str, max_len exist
				; postconditions: EAX, ECX, EDX, changed
				; Receives:
				; buffer = empty array that is passed in which will hold input
				; prompt = prompt to user
				; len_str = count of bytes input by user
				; max_len = maximum length user can input
				; returns: buffer is filled with user input
				mGetString MACRO buffer, prompt, len_str, max_len
				PUSHAD

				mov     EDX, prompt   ; display prompt message to user
				call    WriteString

				mov     EDX, buffer   ; move buffer to EDX register, and size of maximum length of input string to ECX register
				mov     ECX, max_len

				call    ReadString    ; call ReadString to get user input and put result in buffer variable
				mov     len_str, EAX    ; move length of input string to len_str variable

				POPAD
				ENDM



				; -- mDisplayString --
				; Displays string to user interface
				; preconditions: string exists
				; postconditions: EDX changed
				; Receives:
				; string = string made up of bytes
				; returns: message to user
				mDisplayString MACRO string
				PUSHAD

				mov     EDX, string
				call    WriteString

				POPAD
				ENDM



 = 0000001E			ASCIIARRAYSIZE = 30
 = 0000000A			NUMSARRAYSIZE = 10



 00000000			.data
 00000000 50 52 4F 47 52	intro1      BYTE      "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures ",13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   20 0D 0A 00
 00000040 57 72 69 74 74	intro2      BYTE      "Written by: Salim Jalaleddine ",13,10,0
	   65 6E 20 62 79
	   3A 20 53 61 6C
	   69 6D 20 4A 61
	   6C 61 6C 65 64
	   64 69 6E 65 20
	   0D 0A 00
 00000061 0D 0A 50 6C 65	prompt1     BYTE      13,10,"Please provide 10 signed decimal integers.",13,10
	   61 73 65 20 70
	   72 6F 76 69 64
	   65 20 31 30 20
	   73 69 67 6E 65
	   64 20 64 65 63
	   69 6D 61 6C 20
	   69 6E 74 65 67
	   65 72 73 2E 0D
	   0A
 0000008F  45 61 63 68 20	            BYTE      "Each number needs to be small enough to fit inside a 32 bit register. After you have finished inputting the raw numbers I will display a list of the "
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 20
	   41 66 74 65 72
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20
 00000124  69 6E 74 65 67	            BYTE      "integers, their sum, and their average value.",13,10,0
	   65 72 73 2C 20
	   74 68 65 69 72
	   20 73 75 6D 2C
	   20 61 6E 64 20
	   74 68 65 69 72
	   20 61 76 65 72
	   61 67 65 20 76
	   61 6C 75 65 2E
	   0D 0A 00
 00000154 50 6C 65 61 73	prompt2     BYTE      "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 00000173 45 52 52 4F 52	error       BYTE      "ERROR: You did not enter a signed number or your number was too big.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
 000001BA 0D 0A 59 6F 75	intro3      BYTE      13,10,"You entered the following numbers: ",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 20 0D 0A 00
 000001E2 54 68 65 20 73	sumIntro    BYTE      "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000200 54 68 65 20 74	aveIntro    BYTE      "The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000021B  0000001E [		buffer      BYTE      ASCIIARRAYSIZE DUP (?)
	    00
	   ]
 00000239 00000000		total_num   SDWORD    ?
 0000023D  00000001 [		len_str     BYTE      1 DUP (?)
	    00
	   ]
 0000023E  0000000A [		list_nums   SDWORD    NUMSARRAYSIZE  DUP (?)
	    00000000
	   ]
 00000266 00000000		is_negative DWORD     0
 0000026A 0000001E		max_len     DWORD     ASCIIARRAYSIZE
 0000026E 00000000		list_ptr    DWORD     0
 00000272 2C 20 00		spacing     BYTE      ", ",0
 00000275 00000000		sum         SDWORD     0
 00000279  00000001 [		temp_str    BYTE      1 DUP(?)
	    00
	   ]

 00000000			.code
 00000000			main PROC
				  mDisplayString  OFFSET intro1   ; Display introductions as well as prompt for signed integers
 00000000  60		     1	PUSHAD
 00000001  BA 00000000 R     1	mov     EDX, OFFSET intro1
 00000006  E8 00000000 E     1	call    WriteString
 0000000B  61		     1	POPAD
				  mDisplayString  OFFSET intro2
 0000000C  60		     1	PUSHAD
 0000000D  BA 00000040 R     1	mov     EDX, OFFSET intro2
 00000012  E8 00000000 E     1	call    WriteString
 00000017  61		     1	POPAD
				  mDisplayString  OFFSET prompt1
 00000018  60		     1	PUSHAD
 00000019  BA 00000061 R     1	mov     EDX, OFFSET prompt1
 0000001E  E8 00000000 E     1	call    WriteString
 00000023  61		     1	POPAD
 00000024  E8 00000000 E	  call            Crlf

 00000029  B9 0000000A		  mov             ECX, NUMSARRAYSIZE

 0000002E			  _getNumber:                     ; Loop in main procedure that calls procedure ReadVal to get number from user
 0000002E  51			  PUSH            ECX
 0000002F  FF 35 0000026E R	  PUSH            list_ptr
 00000035  68 00000154 R	  PUSH            OFFSET prompt2
 0000003A  68 00000173 R	  PUSH            OFFSET error
 0000003F  68 0000021B R	  PUSH            OFFSET buffer
 00000044  FF 35 00000239 R	  PUSH            total_num
 0000004A  68 0000023E R	  PUSH            OFFSET list_nums
 0000004F  68 0000023D R	  PUSH            OFFSET len_str
 00000054  68 00000266 R	  PUSH            OFFSET is_negative
 00000059  FF 35 0000026A R	  PUSH            max_len
 0000005F  E8 000000C5		  call            ReadVal
 00000064  59			  POP             ECX
 00000065  83 05 0000026E R	  add             list_ptr, 4   ; increment pointer pointing to list
	   04
 0000006C  E2 C0		  LOOP            _getNumber

				  mDisplayString  OFFSET intro3  ; message before displaying numbers
 0000006E  60		     1	PUSHAD
 0000006F  BA 000001BA R     1	mov     EDX, OFFSET intro3
 00000074  E8 00000000 E     1	call    WriteString
 00000079  61		     1	POPAD

 0000007A  BE 0000023E R	  mov             ESI, OFFSET list_nums  ; point ESI to address of list_nums and clear EAX registser
 0000007F  B8 00000000		  mov             EAX, 0

 00000084  B9 0000000A		  mov             ECX, 10   ; initialize loop counter

 00000089			  _displayNumbers:     ; Loop in main procedure that calls procedure WriteVal to display numbers to user
 00000089  51			  PUSH             ECX

 0000008A  FC			  cld                  ; set clear direction flag and then load SDWORD into EAX
 0000008B  AD			  LODSD
 0000008C  68 00000266 R	  PUSH             OFFSET is_negative
 00000091  50			  PUSH             EAX       ; push SDWORD to stack
 00000092  68 00000279 R	  PUSH             OFFSET temp_str
 00000097  E8 0000017B		  call             WriteVal

 0000009C  59			  POP              ECX  ; return preserved loop counter

 0000009D  83 F9 01		  cmp              ECX, 1  ; check if last iteration, if so go to end loop so extra comma isn't added
 000000A0  74 0C		  je               _skipSpacing

				  mDisplayString   OFFSET spacing    ; add comma
 000000A2  60		     1	PUSHAD
 000000A3  BA 00000272 R     1	mov     EDX, OFFSET spacing
 000000A8  E8 00000000 E     1	call    WriteString
 000000AD  61		     1	POPAD

 000000AE			  _skipSpacing:
 000000AE  E2 D9		  LOOP            _displayNumbers

 000000B0  E8 00000000 E	  call            Crlf


 000000B5  BE 0000023E R	  mov             ESI, OFFSET list_nums  ; find sum
 000000BA  B9 0000000A		  mov             ECX, 10
 000000BF			  _addNums:
 000000BF  B8 00000000		  mov             EAX, 0
 000000C4  FC			  cld
 000000C5  AD			  LODSD
 000000C6  01 05 00000275 R	  add             sum, EAX
 000000CC  E2 F1		  LOOP            _addNums

				  mDisplayString   OFFSET sumIntro  ; display sum message
 000000CE  60		     1	PUSHAD
 000000CF  BA 000001E2 R     1	mov     EDX, OFFSET sumIntro
 000000D4  E8 00000000 E     1	call    WriteString
 000000D9  61		     1	POPAD

 000000DA  A1 00000275 R	  mov              EAX, sum        ; display sum using WriteVal
 000000DF  68 00000266 R	  PUSH             OFFSET is_negative    
 000000E4  50			  PUSH             EAX      
 000000E5  68 00000279 R	  PUSH             OFFSET temp_str
 000000EA  E8 00000128		  call             WriteVal

 000000EF  E8 00000000 E	  call Crlf

				  mDisplayString   OFFSET aveIntro  ; display average message
 000000F4  60		     1	PUSHAD
 000000F5  BA 00000200 R     1	mov     EDX, OFFSET aveIntro
 000000FA  E8 00000000 E     1	call    WriteString
 000000FF  61		     1	POPAD

 00000100  A1 00000275 R	  mov              EAX, sum    ; find average
 00000105  99			  CDQ
 00000106  BB 0000000A		  mov              EBX, 10
 0000010B  F7 FB		  idiv             EBX

 0000010D  68 00000266 R	  PUSH             OFFSET is_negative   ; display average using WriteVal
 00000112  50			  PUSH             EAX      
 00000113  68 00000279 R	  PUSH             OFFSET temp_str
 00000118  E8 000000FA		  call             WriteVal

 0000011D  E8 00000000 E	  call Crlf

				  Invoke ExitProcess,0	; exit to operating system
 00000122  6A 00	   *	    push   +000000000h
 00000124  E8 00000000 E   *	    call   ExitProcess
 00000129			main ENDP



				; -- ReadVal --
				; Reads values from user as string, then converts to SDWORD type and stores into list_nums
				; preconditions: prompt2, error, buffer, total_num, list_nums, len_str, is_negative, max_len are on stack
				; postconditions: EAX, ECX, EDI, EBX, EBP, ESI, EDX changed
				; Receives:
				; prompt_2 = prompt to user to put in number
				; error = error message
				; buffer = empty array
				; total_num = SDWORD accumulator
				; list_nums: array that holds SDWORDS
				; len_str: count of input length by user
				; is_negative: variable to keep track of negation
				; max_len: maximum bytes user can put
				; returns: list_nums is filled with converted SDWORD
 00000129			ReadVal PROC
 00000129  55			  PUSH            EBP     ; set base pointer
 0000012A  8B EC		  mov             EBP, ESP

 0000012C  60			  PUSHAD    ; preserve registers

 0000012D  8B 5D 28		  mov             EBX, [EBP + 40]
 00000130  8B 7D 14		  mov             EDI, [EBP + 20]            ; move address of list of sdwords to EDI register, then find place in list
 00000133  03 FB		  add             EDI, EBX
 00000135  EB 21		  jmp             _prompt

 00000137			  _popECX:
 00000137  59			  POP            ECX

 00000138			  _error:                       ; display error message to user
 00000138  81 FB 80000000	  cmp            EBX, 2147483648  ; account for -214783648 edge case
 0000013E  74 02		  JE             _checkEdgeCase

 00000140  EB 0C		  jmp            _finishError

 00000142			  _checkEdgeCase:
 00000142  8B 45 0C		  mov            EAX, [EBP + 12]   ; check if negative flag is set, if it is not then finish with error, otherwise jump to makeNegative
 00000145  83 F8 01		  cmp            EAX, 1
 00000148  0F 84 000000B4	  je             _makeNegative        

 0000014E			  _finishError:
				  mDisplayString [EBP + 32]
 0000014E  60		     1	PUSHAD
 0000014F  8B 55 20	     1	mov     EDX, [EBP + 32]
 00000152  E8 00000000 E     1	call    WriteString
 00000157  61		     1	POPAD

 00000158			  _prompt:
				  mGetString     [EBP + 28], [EBP + 36], [EBP + 16], [EBP + 8]    ; get user input and pass in variables from stack
 00000158  60		     1	PUSHAD
 00000159  8B 55 24	     1	mov     EDX, [EBP + 36]   ; display prompt message to user
 0000015C  E8 00000000 E     1	call    WriteString
 00000161  8B 55 1C	     1	mov     EDX, [EBP + 28]   ; move buffer to EDX register, and size of maximum length of input string to ECX register
 00000164  8B 4D 08	     1	mov     ECX, [EBP + 8]
 00000167  E8 00000000 E     1	call    ReadString    ; call ReadString to get user input and put result in buffer variable
 0000016C  89 45 10	     1	mov     [EBP + 16], EAX    ; move length of input string to len_str variable
 0000016F  61		     1	POPAD
				  
 00000170  8B 45 10		  mov            EAX, [EBP + 16]         ; move length of input string to ECX to initialize loop counter
 00000173  8B C8		  mov            ECX, EAX            

 00000175  8B 75 1C		  mov            ESI, [EBP + 28]  
 00000178  8B 5D 18		  mov            EBX, [EBP + 24]

 0000017B  51			  PUSH           ECX                ; preserve loop counter and clear EAX register
 0000017C  B8 00000000		  mov            EAX, 0

 00000181  FC			  cld                ; clear direction flag and load data into EAX register
 00000182  AC			  LODSB

 00000183  53			  PUSH           EBX               ; reset negative flag
 00000184  BB 00000000		  mov            EBX, 0
 00000189  89 5D 0C		  mov            [EBP + 12], EBX
 0000018C  5B			  POP            EBX       

 0000018D  83 F8 2B		  cmp            EAX, 43   ; check if positive  sign
 00000190  74 0C		  je             _positive

 00000192  83 F8 2D		  cmp            EAX, 45   ; check if negative sign
 00000195  74 09		  je             _negative

 00000197  83 F8 30		  cmp            EAX, 48   ; check if leading zero
 0000019A  74 0E		  je             _checkZero

 0000019C  EB 20		  jmp            _validateSize   ; otherwise jump to validate size

 0000019E			  _positive:
 0000019E  EB 0A		  jmp            _checkZero

 000001A0			  _negative:                ; if negative, set negative variable, decrement loop counter, and enter loop
 000001A0  53			  PUSH           EBX
 000001A1  BB 00000001		  mov            EBX, 1
 000001A6  89 5D 0C		  mov            [EBP + 12], EBX
 000001A9  5B			  POP            EBX

 000001AA			  _checkZero:             ; iterate over leading zeros
 000001AA  B8 00000000		  mov            EAX, 0

 000001AF  FC			  cld
 000001B0  AC			  LODSB      
 000001B1  59			  POP            ECX
 000001B2  49			  dec            ECX

 000001B3  51			  PUSH           ECX
 000001B4  83 F8 30		  cmp            EAX, 48    ; if zero then keep iterating to check for zeros
 000001B7  74 F1		  je             _checkZero       

 000001B9  83 F9 00		  cmp             ECX, 0  ; catch edge case if 0 is only number
 000001BC  74 4C		  je              _zero

 000001BE			  _validateSize:           ; if number without leading zeros and sign is larger than 10, then is invalid
 000001BE  83 F9 0A		  cmp            ECX, 10
 000001C1  0F 8F FFFFFF70	  jg             _popECX

 000001C7  EB 08		  jmp            _validNumber

 000001C9			  _nextNumber:
 000001C9  51			  PUSH           ECX                ; preserve loop counter and clear EAX register
 000001CA  B8 00000000		  mov            EAX, 0

 000001CF  FC			  cld                ; clear direction flag and load data into EAX register
 000001D0  AC			  LODSB

 000001D1			  _validNumber:
 000001D1  83 F8 30		  cmp            EAX, 48    ; throw error if ascii is below 48
 000001D4  0F 8C FFFFFF5D	  JL             _popECX

 000001DA  83 F8 39		  cmp            EAX, 57    ; throw error if ascii is above 57
 000001DD  0F 8F FFFFFF54	  JG             _popECX

 000001E3  83 E8 30		  sub            EAX, 48     ; convert in ascii from character to dec, then multiply accumulator by 10, then add converted ascii to accumulator
 000001E6  6B DB 0A		  imul           EBX, 10
 000001E9  0F 80 FFFFFF48	  JO             _popECX        ; invalid if overflow flag is set, which means accumulated number too large/small

 000001EF  03 D8		  add            EBX, EAX
 000001F1  0F 80 FFFFFF40	  JO             _popECX        ; invalid if overflow flag is set, which means accumulated number too large/small

 000001F7  59			  POP            ECX
 000001F8  E2 CF		  LOOP           _nextNumber

 000001FA  8B 45 0C		  mov            EAX, [EBP + 12]   ; check if negative flag is set, if it is not then jump to finish
 000001FD  83 F8 00		  cmp            EAX, 0
 00000200  74 0E		  je             _finish

 00000202			  _makeNegative:
 00000202  8B C3		  mov            EAX, EBX     ; if negative flag set, negate current number
 00000204  F7 D8		  neg            EAX
 00000206  8B D8		  mov            EBX, EAX     
 00000208  EB 06		  jmp            _finish

 0000020A			  _zero:
 0000020A  59			  POP            ECX
 0000020B  BB 00000000		  mov            EBX, 0

 00000210			  _finish:
 00000210  89 1F		  mov            [EDI], EBX    ; move accumulator result to proper place in list_nums using Register Indirect Addressing

 00000212  61			  POPAD

 00000213  5D			  POP            EBP     ; pop base pointer
 00000214  C2 0024		  RET            36    
 00000217			ReadVal ENDP




				; -- WriteVal --
				; Converts from SDWORD to ascii format, displays to user
				; preconditions: is_negative, EAX with SDWORD filled in, temp_str exist
				; postconditions: EAX, EDX, EBP, ESP, ESI, ECX, EBX, EDI changed
				; Receives:
				; is_negative = variable to keep track of negation
				; EAX (SDWORD) = EAX Register filled with corresponding SDWORD to be converted to aasci 
				; temp_str = empty string that will be filled with ascii
				; returns: ascii character to user interface
 00000217			WriteVal PROC

 00000217  55			  PUSH           EBP     ; set base pointer
 00000218  8B EC		  mov            EBP, ESP

 0000021A  60			  PUSHAD       ; preserve registers

 0000021B  BB 00000000		  mov            EBX, 0
 00000220  89 5D 10		  mov            [EBP + 16], EBX  ; clear negative flag from previous iterations

 00000223  B9 00000000		  mov            ECX, 0 ; initialize counter
 00000228  8B 45 0C		  mov            EAX, [EBP + 12]

 0000022B  83 F8 00		  cmp            EAX, 0    ; check if inputted SDWORD is negative, if so set flag to 1
 0000022E  7C 02		  jl             _setNegativeFlag

 00000230  EB 0A		  jmp            _aasciConversion

 00000232			  _setNegativeFlag:         ; set negative flag by making is_negative equal to 1, then make SDWORD positive by using neg
 00000232  BA 00000001		  mov            EDX, 1
 00000237  89 55 10		  mov            [EBP + 16], EDX
 0000023A  F7 D8		  neg            EAX

 0000023C			  _aasciConversion:
 0000023C  41			  inc            ECX

 0000023D  99			  CDQ
 0000023E  BB 0000000A		  mov            EBX, 10   ; divide by 10
 00000243  F7 FB		  idiv           EBX

 00000245  52			  PUSH           EDX  ; push remainder to stack

 00000246  83 F8 00		  cmp             EAX, 0   ; check whether last number if quotient is 0
 00000249  74 02		  je              _lastNum

 0000024B  EB EF		  jmp            _aasciConversion

 0000024D			  _lastNum:
 0000024D  8B 7D 08		  mov            EDI, [EBP + 8]   ; move tmp_str to EDI for preparation to fill string

 00000250  8B D9		  mov            EBX, ECX   ; preserve loop for clearing of string at the end

 00000252  8B 45 10		  mov            EAX, [EBP + 16] ; check if negative flag is set from before, if so add negative sign to beginning of string
 00000255  83 F8 00		  cmp            EAX, 0
 00000258  74 0C		  je             _reverse

 0000025A  B8 00000000		  mov            EAX, 0
 0000025F  B8 0000002D		  mov            EAX, 45    ; display negative sign, and increment EBX counter for clear at end
 00000264  AA			  STOSB
 00000265  43			  inc            EBX

 00000266			  _reverse:
 00000266  B8 00000000		  mov            EAX, 0
 0000026B  58			  POP            EAX    ; pop from stack and mov to EAX, then add 48 to convert to string form, then load into string
 0000026C  83 C0 30		  add            EAX, 48
 0000026F  AA			  STOSB
				  
 00000270  E2 F4		  LOOP           _reverse

				  mDisplayString [EBP + 8]
 00000272  60		     1	PUSHAD
 00000273  8B 55 08	     1	mov     EDX, [EBP + 8]
 00000276  E8 00000000 E     1	call    WriteString
 0000027B  61		     1	POPAD

 0000027C  8B CB		  mov            ECX, EBX ; initialize loop counter for clearing

 0000027E			  _clearString:          ; clear string for next SDWORD in outer loop in main procedure
 0000027E  B8 00000000		  mov            EAX, 0
 00000283  FD			  STD
 00000284  AA			  STOSB

 00000285  E2 F7		  LOOP           _clearString

 00000287  61			  POPAD

 00000288  5D			  POP            EBP     ; pop base pointer
 00000289  C2 000C		  RET            12

 0000028C			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30146.0	    12/04/22 23:12:37
<Project 6 - String Primitives and Macros   (Proj6_jalaleds.  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000028C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000129 _TEXT	Length= 000000EE Public STDCALL
  _popECX  . . . . . . . . . . .	L Near	 00000137 _TEXT	
  _error . . . . . . . . . . . .	L Near	 00000138 _TEXT	
  _checkEdgeCase . . . . . . . .	L Near	 00000142 _TEXT	
  _finishError . . . . . . . . .	L Near	 0000014E _TEXT	
  _prompt  . . . . . . . . . . .	L Near	 00000158 _TEXT	
  _positive  . . . . . . . . . .	L Near	 0000019E _TEXT	
  _negative  . . . . . . . . . .	L Near	 000001A0 _TEXT	
  _checkZero . . . . . . . . . .	L Near	 000001AA _TEXT	
  _validateSize  . . . . . . . .	L Near	 000001BE _TEXT	
  _nextNumber  . . . . . . . . .	L Near	 000001C9 _TEXT	
  _validNumber . . . . . . . . .	L Near	 000001D1 _TEXT	
  _makeNegative  . . . . . . . .	L Near	 00000202 _TEXT	
  _zero  . . . . . . . . . . . .	L Near	 0000020A _TEXT	
  _finish  . . . . . . . . . . .	L Near	 00000210 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000217 _TEXT	Length= 00000075 Public STDCALL
  _setNegativeFlag . . . . . . .	L Near	 00000232 _TEXT	
  _aasciConversion . . . . . . .	L Near	 0000023C _TEXT	
  _lastNum . . . . . . . . . . .	L Near	 0000024D _TEXT	
  _reverse . . . . . . . . . . .	L Near	 00000266 _TEXT	
  _clearString . . . . . . . . .	L Near	 0000027E _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000129 Public STDCALL
  _getNumber . . . . . . . . . .	L Near	 0000002E _TEXT	
  _displayNumbers  . . . . . . .	L Near	 00000089 _TEXT	
  _skipSpacing . . . . . . . . .	L Near	 000000AE _TEXT	
  _addNums . . . . . . . . . . .	L Near	 000000BF _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCIIARRAYSIZE . . . . . . . . .	Number	 0000001Eh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMSARRAYSIZE  . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
aveIntro . . . . . . . . . . . .	Byte	 00000200 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000021B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 00000173 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 00000040 _DATA	
intro3 . . . . . . . . . . . . .	Byte	 000001BA _DATA	
is_negative  . . . . . . . . . .	DWord	 00000266 _DATA	
len_str  . . . . . . . . . . . .	Byte	 0000023D _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_nums  . . . . . . . . . . .	DWord	 0000023E _DATA	
list_ptr . . . . . . . . . . . .	DWord	 0000026E _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
max_len  . . . . . . . . . . . .	DWord	 0000026A _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000061 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000154 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
spacing  . . . . . . . . . . . .	Byte	 00000272 _DATA	
sumIntro . . . . . . . . . . . .	Byte	 000001E2 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000275 _DATA	
temp_str . . . . . . . . . . . .	Byte	 00000279 _DATA	
total_num  . . . . . . . . . . .	DWord	 00000239 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
